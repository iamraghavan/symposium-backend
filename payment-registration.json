{
  "info": {
    "_postman_id": "2c6a8b82-9df8-4b2d-9f6f-one-time-250",
    "name": "Event API — Registration + Payments (Razorpay, One-time ₹250)",
    "description": "Idempotent registrations with API-key auth. One-time ₹250 per user across all events. Client flow uses /order and /verify (no webhooks required).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_url", "value": "http://localhost:000" },
    { "key": "api_key", "value": "rjfqrur9L0v2XNzx574DI1Djejii70JP5S" },
    { "key": "event_id", "value": "68cf9cf25a9581b9bc4b089f" },
    { "key": "registration_id", "value": "" },
    { "key": "razorpay_order_id", "value": "" },
    { "key": "razorpay_payment_id", "value": "" },
    { "key": "razorpay_signature", "value": "" }
  ],
  "item": [
    {
      "name": "Registrations",
      "item": [
        {
          "name": "Create Registration — Individual (idempotent)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/registrations",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "registrations"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{event_id}}\",\n  \"eventName\": \"Sample Event\",\n  \"type\": \"individual\",\n  \"notes\": \"via Postman\"\n}"
            },
            "description": "Creates or returns existing registration. If user already paid once → confirmed. Else returns needsPayment: true; call /order next."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('201 or 200', ()=> pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "let r={}; try{ r=pm.response.json(); }catch(e){}",
                  "if(r && r.registration && r.registration._id){ pm.collectionVariables.set('registration_id', r.registration._id); }",
                  "if(r && r.payment && r.payment.needsPayment===false){ console.log('No payment needed; registration already confirmed or free.'); }",
                  "if(r && r.payment && r.payment.needsPayment===true){ console.log('Payment required: call /order with registrationId'); }"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Registration — Team (idempotent; charge never-paid only)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/registrations",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "registrations"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{event_id}}\",\n  \"eventName\": \"Hack Sprint\",\n  \"type\": \"team\",\n  \"team\": {\n    \"name\": \"Alpha\",\n    \"members\": [\n      { \"name\": \"Alice\", \"email\": \"alice@example.com\" },\n      { \"name\": \"Bob\", \"email\": \"bob@example.com\" }\n    ],\n    \"size\": 2\n  },\n  \"notes\": \"team via Postman\"\n}"
            },
            "description": "Creates or returns existing team registration. Only members who never paid the one-time fee are charged (₹250 each). Use /order next if needed."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('201 or 200', ()=> pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "let r={}; try{ r=pm.response.json(); }catch(e){}",
                  "if(r && r.registration && r.registration._id){ pm.collectionVariables.set('registration_id', r.registration._id); }"
                ]
              }
            }
          ]
        },
        {
          "name": "List My Registrations",
          "request": {
            "method": "GET",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/registrations/my",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "registrations", "my"]
            }
          }
        },
        {
          "name": "Get Registration by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/registrations/{{registration_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "registrations", "{{registration_id}}"]
            }
          }
        },
        {
          "name": "Checkout Acknowledgement (optional analytics)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/registrations/{{registration_id}}/checkout-ack",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "v1",
                "registrations",
                "{{registration_id}}",
                "checkout-ack"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{razorpay_order_id}}\",\n  \"paymentId\": \"{{razorpay_payment_id}}\",\n  \"signature\": \"{{razorpay_signature}}\",\n  \"notes\": { \"source\": \"postman\" }\n}"
            },
            "description": "Stores client-side details in payment.history. Does NOT mark as paid (use /verify)."
          }
        }
      ]
    },
    {
      "name": "Payments",
      "item": [
        {
          "name": "Create Razorpay Order for Registration (/api/v1/order)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/order",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "order"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"registrationId\": \"{{registration_id}}\"\n}"
            },
            "description": "Creates a Razorpay Order covering only still-unpaid people for this registration. Returns { keyId, order } on success."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200 or 201', ()=> pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "let r={}; try{ r=pm.response.json(); }catch(e){}",
                  "const oid = r && r.payment && r.payment.order && r.payment.order.id;",
                  "if(oid){ pm.collectionVariables.set('razorpay_order_id', oid); }",
                  "const amt = r && r.payment && r.payment.order && r.payment.order.amount;",
                  "if(amt){ console.log('Order amount (paise):', amt); }"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Payment Signature & Finalize (/api/v1/verify)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "x-api-key", "value": "{{api_key}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/verify",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "verify"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"registrationId\": \"{{registration_id}}\",\n  \"razorpay_order_id\": \"{{razorpay_order_id}}\",\n  \"razorpay_payment_id\": \"{{razorpay_payment_id}}\",\n  \"razorpay_signature\": \"{{razorpay_signature}}\"\n}"
            },
            "description": "Server-side signature verification (order_id|payment_id with RAZORPAY_KEY_SECRET). On success: marks payment & registration paid + flags users hasPaidEventFee=true."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('200 OK', ()=> pm.response.to.have.status(200));",
                  "let r={}; try{ r=pm.response.json(); }catch(e){}",
                  "if(r && r.registration && r.registration.status === 'confirmed'){ console.log('✅ Registration confirmed'); }"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
